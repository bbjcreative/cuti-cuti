{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\cuti-cuti\\\\src\\\\components\\\\BlogSection.js\",\n  _s = $RefreshSig$();\n// BlogSection.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlogSection() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchBlogPosts = async () => {\n      try {\n        // The actual API endpoint you provided\n        const response = await fetch('https://zwilf14auh.execute-api.ap-southeast-5.amazonaws.com/Prod/releases');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Process the 'releases' array from the API response\n        const formattedPosts = data.releases.map(item => {\n          // Generate a slug from the title for cleaner URLs and unique keys\n          const slug = item.title.toLowerCase().replace(/[^a-z0-9\\s-]/g, '') // Remove non-alphanumeric chars\n          .replace(/\\s+/g, '-') // Replace spaces with -\n          .replace(/-+/g, '-'); // Remove duplicate -\n\n          // Create an excerpt from the content for the blog listing\n          const excerpt = item.content.length > 150 ? item.content.substring(0, 150) + '...' : item.content;\n\n          // Format the date for display\n          // Assuming 'item.date' is in a format that Date constructor can parse\n          const formattedDate = new Date(item.date).toLocaleDateString('en-MY', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          });\n\n          // You might want to assign specific placeholder images based on categories\n          // For now, using a random placeholder as a demonstration\n          const placeholderImages = ['/images/blog-placeholder-1.jpg', '/images/blog-placeholder-2.jpg', '/images/blog-placeholder-3.jpg'];\n          const randomImage = placeholderImages[Math.floor(Math.random() * placeholderImages.length)];\n          return {\n            id: slug,\n            // Use slug as a unique ID for React's key prop\n            title: item.title,\n            slug: slug,\n            date: formattedDate,\n            content: item.content,\n            excerpt: excerpt,\n            featuredImage: randomImage,\n            // Using a random placeholder image\n            originalLink: item.link // Keep the original link if you want to reference the source\n          };\n        });\n        setPosts(formattedPosts);\n      } catch (err) {\n        setError(\"Failed to fetch travel ideas: \" + err.message);\n        console.error(\"API Fetch Error for blog posts:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBlogPosts();\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center dark:text-gray-400\",\n    children: \"Loading exciting travel ideas from Malaysia...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center text-red-500\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 23\n  }, this);\n  if (posts.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center dark:text-gray-400\",\n    children: \"No new travel ideas available at the moment. Check back soon!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 36\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid md:grid-cols-2 lg:grid-cols-3 gap-8\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.featuredImage,\n        alt: post.title,\n        className: \"w-full h-48 object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold mb-2 text-gray-900 dark:text-white\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 dark:text-gray-300 text-sm mb-3\",\n          children: post.excerpt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center text-xs text-gray-500 dark:text-gray-400 mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Published on: \", post.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `/blog/${post.slug}`,\n          className: \"text-purple-700 hover:underline dark:text-purple-400\",\n          children: \"Read More \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(BlogSection, \"FFSFm1bVdM1s2gLh8ffGbsIvlRY=\");\n_c = BlogSection;\nexport default BlogSection;\nvar _c;\n$RefreshReg$(_c, \"BlogSection\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BlogSection","_s","posts","setPosts","loading","setLoading","error","setError","fetchBlogPosts","response","fetch","ok","Error","status","data","json","formattedPosts","releases","map","item","slug","title","toLowerCase","replace","excerpt","content","length","substring","formattedDate","Date","date","toLocaleDateString","year","month","day","placeholderImages","randomImage","Math","floor","random","id","featuredImage","originalLink","link","err","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","post","src","alt","href","_c","$RefreshReg$"],"sources":["C:/wamp64/www/cuti-cuti/src/components/BlogSection.js"],"sourcesContent":["// BlogSection.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction BlogSection() {\r\n    const [posts, setPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchBlogPosts = async () => {\r\n            try {\r\n                // The actual API endpoint you provided\r\n                const response = await fetch('https://zwilf14auh.execute-api.ap-southeast-5.amazonaws.com/Prod/releases');\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n\r\n                // Process the 'releases' array from the API response\r\n                const formattedPosts = data.releases.map(item => {\r\n                    // Generate a slug from the title for cleaner URLs and unique keys\r\n                    const slug = item.title.toLowerCase()\r\n                                        .replace(/[^a-z0-9\\s-]/g, '') // Remove non-alphanumeric chars\r\n                                        .replace(/\\s+/g, '-')       // Replace spaces with -\r\n                                        .replace(/-+/g, '-');      // Remove duplicate -\r\n\r\n                    // Create an excerpt from the content for the blog listing\r\n                    const excerpt = item.content.length > 150\r\n                        ? item.content.substring(0, 150) + '...'\r\n                        : item.content;\r\n\r\n                    // Format the date for display\r\n                    // Assuming 'item.date' is in a format that Date constructor can parse\r\n                    const formattedDate = new Date(item.date).toLocaleDateString('en-MY', { year: 'numeric', month: 'long', day: 'numeric' });\r\n\r\n                    // You might want to assign specific placeholder images based on categories\r\n                    // For now, using a random placeholder as a demonstration\r\n                    const placeholderImages = [\r\n                        '/images/blog-placeholder-1.jpg',\r\n                        '/images/blog-placeholder-2.jpg',\r\n                        '/images/blog-placeholder-3.jpg'\r\n                    ];\r\n                    const randomImage = placeholderImages[Math.floor(Math.random() * placeholderImages.length)];\r\n\r\n\r\n                    return {\r\n                        id: slug, // Use slug as a unique ID for React's key prop\r\n                        title: item.title,\r\n                        slug: slug,\r\n                        date: formattedDate,\r\n                        content: item.content,\r\n                        excerpt: excerpt,\r\n                        featuredImage: randomImage, // Using a random placeholder image\r\n                        originalLink: item.link // Keep the original link if you want to reference the source\r\n                    };\r\n                });\r\n                setPosts(formattedPosts);\r\n            } catch (err) {\r\n                setError(\"Failed to fetch travel ideas: \" + err.message);\r\n                console.error(\"API Fetch Error for blog posts:\", err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchBlogPosts();\r\n    }, []); // Empty dependency array means this effect runs once after the initial render\r\n\r\n    if (loading) return <p className=\"text-center dark:text-gray-400\">Loading exciting travel ideas from Malaysia...</p>;\r\n    if (error) return <p className=\"text-center text-red-500\">Error: {error}</p>;\r\n\r\n    if (posts.length === 0) return <p className=\"text-center dark:text-gray-400\">No new travel ideas available at the moment. Check back soon!</p>;\r\n\r\n    return (\r\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n            {posts.map(post => (\r\n                <article key={post.id} className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden\">\r\n                    {/* Placeholder for featured image. In a real scenario, you'd fetch this from your CMS or API if available. */}\r\n                    <img src={post.featuredImage} alt={post.title} className=\"w-full h-48 object-cover\"/>\r\n                    <div className=\"p-5\">\r\n                        <h3 className=\"text-xl font-semibold mb-2 text-gray-900 dark:text-white\">{post.title}</h3>\r\n                        <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-3\">{post.excerpt}</p>\r\n                        <div className=\"flex justify-between items-center text-xs text-gray-500 dark:text-gray-400 mb-3\">\r\n                            {/* Author and read time are not available in the provided API response, so they are omitted for now. */}\r\n                            <span>Published on: {post.date}</span>\r\n                        </div>\r\n                        {/* Link to the internal blog post page. You will need to implement a dynamic route for this. */}\r\n                        <a href={`/blog/${post.slug}`} className=\"text-purple-700 hover:underline dark:text-purple-400\">Read More &rarr;</a>\r\n                    </div>\r\n                </article>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlogSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}